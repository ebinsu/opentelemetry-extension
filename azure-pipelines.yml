# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - name: serviceName
    value: fulfillment-service
parameters:
  - name: env
    value: dev

stages:
  - stage:
    jobs:
      - job:
        steps:
          - bash: |
              buildUrl="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
              commitAuthor=$(git log | head -4 | grep Author | awk -F '[:<]' '{print $2}' | sed 's/ //g' | tr A-Z a-z)
              if [[ $commitAuthor =~ "ebin" ]]; then
              commitAuthor="U02325RV7D1"
              elif [[ $commitAuthor =~ "alex" ]]; then
              commitAuthor="U027GEC49C6"
              elif [[ $commitAuthor =~ "simple" ]]; then
              commitAuthor="U023RP3A15W"
              fi
              echo '{"channel":"C050W5GADEH","text":"<@'${commitAuthor}'> *$(Build.SourceBranchName)* *${{ variables.serviceName }}* build success. <'${buildUrl}'|(Build Result)> \n\n *Commit*: $(Build.SourceVersionMessage)"}'
              
              echo "##vso[task.setvariable variable=slackCommitAuthor]$commitAuthor"
              echo "##vso[task.setvariable variable=slackBuildUrl]$buildUrl"
          - bash: |
              echo 1
              if [[ $commitAuthor =~ "ebin" ]] then
              fi
            displayName: "1"
            continueOnError: true
          - bash: |
              echo 2
            displayName: "2"
          - bash: |
              echo 3
              echo '{"channel":"C050W5GADEH","text":"<@'$(slackCommitAuthor)'> *${{ parameters.env }}* *${{ parameters.serviceName }}* build succeeded. <'$(buildUrl)'|(Build Result)> \n\n *Commit message*: $(Build.SourceVersionMessage)"}'
            displayName: "3 succeeded"
            condition: succeeded()
            continueOnError: true
          - bash: |
              echo 4
              echo '{"channel":"C050W5GADEH","text":"<@'$(slackCommitAuthor)'> *${{ parameters.env }}* *${{ parameters.serviceName }}* build succeeded. <'$(buildUrl)'|(Build Result)> \n\n *Commit message*: $(Build.SourceVersionMessage)"}'
            displayName: "4 failed"
            condition: failed()
            continueOnError: true
          - bash: |
              echo 5
            displayName: "5"


#steps:
#  #- template: templates/include-steps.yml
#  - bash: |
#      buildUrl="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
#      commitAuthor=$(git log | head -4 | grep Author | awk -F '[:<]' '{print $2}' | sed 's/ //g' | tr A-Z a-z)
#      if [[ $commitAuthor =~ "ebin" ]]; then
#      commitAuthor="U02325RV7D1"
#      elif [[ $commitAuthor =~ "alex" ]]; then
#      commitAuthor="U027GEC49C6"
#      elif [[ $commitAuthor =~ "simple" ]]; then
#      commitAuthor="U023RP3A15W"
#      fi
#      echo '{"channel":"C050W5GADEH","text":"<@'${commitAuthor}'> *$(Build.SourceBranchName)* *${{ variables.serviceName }}* build success. <'${buildUrl}'|(Build Result)> \n\n *Commit*: $(Build.SourceVersionMessage)"}'
#
#
      
#      curl -X POST -H 'Authorization: Bearer $(token)' \
#      -H 'Content-type: application/json' \
#        --data '{"channel":"C050W5GADEH","text":"<@'${commitAuthor}'> <'${buildUrl}'|(Build Result)>. \n\n *Service*: ${{ variables.serviceName }}  *Env*: $(Build.SourceBranchName) \n\n *Commit*: $(Build.SourceVersionMessage)"}' \
#        https://slack.com/api/chat.postMessage

